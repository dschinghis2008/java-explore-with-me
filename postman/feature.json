{
	"info": {
		"_postman_id": "d49a3c4f-b866-467d-b449-04e0f39aaa00",
		"name": "Test Explore With Me - Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Comments",
			"item": [
				{
					"name": "Add new user's comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test add comment from any user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
									"    pm.expect(jsonData.text, '\"text\" field').to.eql('new comment');\r",
									"    pm.expect(jsonData.authorId, '\"authorId\" field').to.eql(1);\r",
									"    pm.expect(jsonData.eventId, '\"eventId\" field').to.eql(15);\r",
									"    pm.expect(jsonData.visible, '\"visible\" field').to.false;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"text\":\"new comment\",\"author\":1,\"event\":15}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/private/user/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"private",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new comment with invalid user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"text\":\"wrong comment\",\"event\":15}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/private/user/1000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"private",
								"user",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new comment with invalid event id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"text\":\"wrong comment\",\"event\":200}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/private/user/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"private",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new comment with invalid body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"text\":\"\",\"event\":15}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/private/user/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"private",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new participant's comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test add comment from participant\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id, '\"id\" field').to.eql(2);\r",
									"    pm.expect(jsonData.text, '\"text\" field').to.eql('comment on event 15');\r",
									"    pm.expect(jsonData.authorId, '\"authorId\" field').to.eql(25);\r",
									"    pm.expect(jsonData.eventId, '\"eventId\" field').to.eql(15);\r",
									"    pm.expect(jsonData.visible, '\"visible\" field').to.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"text\":\"comment on event 15\",\"event\":15}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/private/user/25",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"private",
								"user",
								"25"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new initiator's comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test add comment from initiator of the event\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id, '\"id\" field').to.eql(3);\r",
									"    pm.expect(jsonData.text, '\"text\" field').to.eql('comment from initiator');\r",
									"    pm.expect(jsonData.authorId, '\"authorId\" field').to.eql(24);\r",
									"    pm.expect(jsonData.eventId, '\"eventId\" field').to.eql(15);\r",
									"    pm.expect(jsonData.visible, '\"visible\" field').to.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"text\":\"comment from initiator\",\"event\":15}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/private/user/24",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"private",
								"user",
								"24"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test update comment from initiator of the event\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id, '\"id\" field').to.eql(3);\r",
									"    pm.expect(jsonData.text, '\"text\" field').to.eql('upd comment from initiator');\r",
									"    pm.expect(jsonData.authorId, '\"authorId\" field').to.eql(24);\r",
									"    pm.expect(jsonData.eventId, '\"eventId\" field').to.eql(15);\r",
									"    pm.expect(jsonData.visible, '\"visible\" field').to.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":3,\"text\":\"upd comment from initiator\",\"event\":15}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/private/user/24",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"private",
								"user",
								"24"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update not own comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":3,\"text\":\"upd comment from initiator\",\"event\":15}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/private/user/340",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"private",
								"user",
								"340"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment's visible",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test update comment from initiator of the event\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
									"    pm.expect(jsonData.text, '\"text\" field').to.eql('new comment');\r",
									"    pm.expect(jsonData.authorId, '\"authorId\" field').to.eql(1);\r",
									"    pm.expect(jsonData.eventId, '\"eventId\" field').to.eql(15);\r",
									"    pm.expect(jsonData.visible, '\"visible\" field').to.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":1,\"event\":15}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/private/user/24/visible?visible=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"private",
								"user",
								"24",
								"visible"
							],
							"query": [
								{
									"key": "visible",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment's visible on not own event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":1,\"event\":122}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/private/user/340/visible?visible=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"private",
								"user",
								"340",
								"visible"
							],
							"query": [
								{
									"key": "visible",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment's visible from admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test update comment from initiator of the event\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
									"    pm.expect(jsonData.text, '\"text\" field').to.eql('new comment');\r",
									"    pm.expect(jsonData.authorId, '\"authorId\" field').to.eql(1);\r",
									"    pm.expect(jsonData.eventId, '\"eventId\" field').to.eql(15);\r",
									"    pm.expect(jsonData.visible, '\"visible\" field').to.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":1}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/adm/visible?visible=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"adm",
								"visible"
							],
							"query": [
								{
									"key": "visible",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all comments of author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"pm.test(\"Test get all\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'items count in total').to.eql(1);\r",
									"    pm.expect(jsonData[0].id, 'result[0]: \"id\" field').to.eql(1);\r",
									"    pm.expect(jsonData[0].text, 'result[0]: \"text\" field').to.eql('new comment');\r",
									"    pm.expect(jsonData[0].visible, 'result[0]: \"visible\" field').to.true;\r",
									"    pm.expect(jsonData[0].authorId, 'result[0]: \"authorId\" field').to.eql(1);\r",
									"    pm.expect(jsonData[0].eventId, 'result[0]: \"eventId\" field').to.eql(15);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/private/user/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"private",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all comments on event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"pm.test(\"Test get all\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'items count in total').to.eql(3);\r",
									"    pm.expect(jsonData[0].id, 'result[0]: \"id\" field').to.eql(1);\r",
									"    pm.expect(jsonData[0].text, 'result[0]: \"text\" field').to.eql('new comment');\r",
									"    pm.expect(jsonData[0].visible, 'result[0]: \"visible\" field').to.true;\r",
									"    pm.expect(jsonData[0].authorId, 'result[0]: \"authorId\" field').to.eql(1);\r",
									"    pm.expect(jsonData[0].eventId, 'result[0]: \"eventId\" field').to.eql(15);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/?eventId=15",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								""
							],
							"query": [
								{
									"key": "eventId",
									"value": "15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comment by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"pm.test(\"Test get all\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
									"    pm.expect(jsonData.text, '\"text\" field').to.eql('new comment');\r",
									"    pm.expect(jsonData.visible, '\"visible\" field').to.true;\r",
									"    pm.expect(jsonData.authorId, '\"authorId\" field').to.eql(1);\r",
									"    pm.expect(jsonData.eventId, '\"eventId\" field').to.eql(15);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/adm/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"adm",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete own comment by author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/private/1/user/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"private",
								"1",
								"user",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId + '/publish', \"Ошибка при публикации события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/' + reqId + '/confirm', \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		}
	]
}